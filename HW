HW_TXT
 1. Создать внешний репозиторий c названием TXT.
New - имя репозитории XML - галочка - ok
 
2. Клонировать репозиторий TXT на локальный компьютер.
git clone git clone https://github.com/marinaV32/TXT.git (ссылка из репозитории раздел https)
 
3. Внутри локального TXT создать файл “new.txt”.
vim new.txt
 
4. Добавить файл под гит.
git add new.txt
 
5. Закоммитить файл.
git commit -m "new"
 
6. Отправить файл на внешний GitHub репозиторий.
git push
 
7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
vim new.txt
1) Full name: Prokopovich Marina
2)Age: 26
3)Number of pets: no
3)Future desired salary: n

esc - :wq (enter)
 
8. Отправить изменения на внешний репозиторий.
git commit -am "new"
git push
 
9. Создать файл preferences.txt
vim preferences.txt
 
10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 1)Favorite movie: Oath
2)Favorite series: From outside
3)Favorite food: pasta
4)Travel Country: Greece

11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
vim sklls.txt
"The QA course will study soft skills and hard skills"
esc - :wq (enter)

 12. Сделать коммит в одну строку.
git add . | git commit -m "red"
 
13. Отправить сразу 2 файла на внешний репозиторий.
git push
 
14. На веб интерфейсе создать файл bug_report.txt.
В Гите заходим на наш репозиторий TXT, жмем "Создать новый файл", даем имя файлу - сохраняем

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
Нажимаем в репозитории измениь файл (карандаш), добавляем текст и сохраняем.
**************
Шапка
1. Короткое описание (Summary)
2. Короткое описание проблемы, явно указывающее на причину и тип ошибочной ситуации.
3. Проект (Project)	Название тестируемого проекта
4.Компонент приложения (Component)	Название части или функции тестируемого продукта
5.Номер версии (Version)	Версия на которой была найдена ошибка
6.Серьезность (Severity)	
7.Наиболее распространена пятиуровневая система градации серьезности дефекта:

8.S1 Блокирующий (Blocker)
9.S2 Критический (Critical)
10.S3 Значительный (Major).
11.S4 Незначительный (Minor)
12.S5 Тривиальный (Trivial)
13.Приоритет (Priority)	
14.Приоритет дефекта:

15.P1 Высокий (High)
16.P2 Средний (Medium)
17.P3 Низкий (Low)
18.Статус (Status)	Статус бага. Зависит от используемой процедуры и жизненного цикла бага (bug workflow and life cycle)
19.Автор (Author)	Создатель баг репорта
20.Назначен на (Assigned To)	Имя сотрудника, назначенного на решение проблемы
21.Окружение
22.ОС / Сервис Пак и т.д. / Браузера + версия / ...	Информация об окружении, на котором был найден баг: операционная система, сервис пак, для WEB тестирования - имя и версия браузера и т.д.
...	 
Описание
23.Шаги воспроизведения (Steps to Reproduce)	Шаги, по которым можно легко воспроизвести ситуацию, приведшую к ошибке.
24.Фактический Результат (Result)	Результат, полученный после прохождения шагов к воспроизведению
25.Ожидаемый результат (Expected Result)	Ожидаемый правильный результат
Дополнения
26.Прикрепленный файл (Attachment)	Файл с логами, скриншот или любой другой документ, который может помочь прояснить причину ошибки или указать на способ решения проблемы
 **************
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT
++++++на 14-18: создала новый файл в репозитории, затем через консоль гид синхронизировала с локальным и внешним репозиторием: 
git fetch   проверила
git pull    синхронизировала
Редактировала: добавила текст 
git fetch   
git pull
